[gd_scene load_steps=12 format=2]

[ext_resource path="res://Water.gd" type="Script" id=1]

[sub_resource type="PlaneMesh" id=1]

[sub_resource type="Shader" id=9]
code = "shader_type spatial;
render_mode specular_phong;

uniform float speed : hint_range(-1,1) = 0.0;

//colours
uniform sampler2D noise1;
uniform sampler2D noise2;
uniform sampler2D normalmap : hint_normal;

uniform vec4 colour : hint_color;
uniform vec4 edge_colour : hint_color;

uniform float edge_scale = 0.25;
uniform float near = 0.1;
uniform float far = 100.f;

uniform vec2 wave_strengh = vec2(0.5, 0.25);
uniform vec2 wave_frequncy = vec2(12.0,12.0);
uniform vec2 time_factor = vec2(1.0,2.0);

float waves(vec2 pos, float time){
	return (wave_strengh.y * sin(pos.y * wave_frequncy.y + time * time_factor.y)) + (wave_strengh.x * sin(pos.x * wave_frequncy.x + time * time_factor.x));
}

void vertex(){
	VERTEX.y += waves(VERTEX.xy, TIME);
	
}

float rim(float depth){
	depth = 2.f * depth - 1.f;
	return near * far / (far + depth * (near - far));
}



void fragment(){
	float time = TIME * speed;
	
	vec3 n1 = texture(noise1, UV + time).rgb;
	vec3 n2 = texture(noise2, UV - time * 0.2).rgb;
	
	vec2 uv_movement = UV * 4.f;
	uv_movement += TIME * speed * 4.f;
	
	float sum = (n1.r + n2.r) - 1.f;
	
	float z_depth = rim(texture(DEPTH_TEXTURE, SCREEN_UV).x);
	float z_pos = rim(FRAGCOORD.z);
	float diff = z_depth - z_pos;
	
	vec2 displacement = vec2(sum * 0.05);
	diff += displacement.x * 50.f;
	
	
	
	vec4 col = mix(edge_colour, colour, step(edge_scale, diff));
	
	vec4 alpha = texture(SCREEN_TEXTURE, SCREEN_UV + displacement);
	
	float fin = 0.0;
	if (sum > 0.0 && sum < 0.4) fin = 0.1;
	if (sum > 0.4 && sum < 0.8) fin = 0.0;
	if (sum > 0.8) fin = 1.f;
	
	ALBEDO = vec3(fin) + mix(alpha.rgb, col.rgb, colour.a);
	
	NORMALMAP = texture(normalmap, uv_movement).rgb;
	
	ROUGHNESS = 0.1;

}

"

[sub_resource type="OpenSimplexNoise" id=4]
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=10]
seamless = true
noise = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=11]
seamless = true
noise = SubResource( 6 )

[sub_resource type="OpenSimplexNoise" id=8]

[sub_resource type="NoiseTexture" id=12]
seamless = true
as_normalmap = true
bump_strength = 4.0
noise = SubResource( 8 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 9 )
shader_param/speed = 0.02
shader_param/colour = Color( 0.4, 0.635294, 0.596078, 0.521569 )
shader_param/edge_colour = Color( 0.32549, 0.745098, 0.698039, 0.0196078 )
shader_param/edge_scale = 1.0
shader_param/near = 1.0
shader_param/far = 100.0
shader_param/wave_strengh = Vector2( 0, 0 )
shader_param/wave_frequncy = Vector2( 12, 12 )
shader_param/time_factor = Vector2( 1, 2 )
shader_param/noise1 = SubResource( 10 )
shader_param/noise2 = SubResource( 11 )
shader_param/normalmap = SubResource( 12 )

[sub_resource type="BoxShape" id=13]
extents = Vector3( 1, 0.615797, 1 )

[node name="Water" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 20, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="Area" type="Area" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, -14.2588, 0 )
script = ExtResource( 1 )

[node name="CollisionShape" type="CollisionShape" parent="Area"]
transform = Transform( 5, 0, 0, 0, 10, 0, 0, 0, 5, 0, -3.35, 0 )
shape = SubResource( 13 )

[connection signal="body_entered" from="Area" to="Area" method="_on_Area_body_entered"]
[connection signal="body_exited" from="Area" to="Area" method="_on_Area_body_exited"]
